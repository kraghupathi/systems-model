#+TITLE: ADS- Design Model and Implementation
#+DATE:  2018-04-18 Wed
#+PROPERTY: session *scratch*
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: org-templates/level-0.org
#+DESCRIPTION: ADS Design and  Documentation
#+OPTIONS: ^:nil

* Introduction
This document describes the requirements, design and implementation
of the *ADS Server*. 

* Requirements
  The functional and security requirements of router are:

** Functional Requirements
   Auto Deployment Service(ADS) is a service. The main job
   of the service is to deploy applications inside the
   cluster.

** Security Requirements
   All common security requirements and general server
   hardening rules are described in [[file:common.org::*Security Requirements][common role]]. ADS
   specific tasks are updated [[Implementation][here]].
 
* Design
** Overall Network diagram of the Auto Deployment Service(ADS)
   The following network diagram represents the interaction
   of the ADS server with the other machines in the cluster.
   It shows the connections from router to ADS server.The
   major functionality of the ADS service is deploying web
   applications in the cluster. 
#+CAPTION: Router Configuration diagram
#+LABEL: router-configuration-diagram
[[./diagrams/router-config.png]]

** Source file for the network diagram
   Update google diagram link here

** Important configuration and data files and folders
|------+----------+-------------------------+------------------------|
| Sno. | Service  | File                    | File Type              |
|------+----------+-------------------------+------------------------|
|   1. | iptables | /etc/sysconfig/iptables | Firewall Configuration |
|------+----------+-------------------------+------------------------|
* Implementation
** Structure of Scripts
  - The implementation of this system is in terms of a
    collection of ads scripts which configures the
    node. These scripts are organized as follows:

#+BEGIN_EXAMPLE
  |-code
  |   |-- ads.yml
  |   |-- roles
  |   |   |-- ads-server
  |   |   |   |-- handlers
  |   |   |   |   `--main.yml
  |   |   |   |-- tasks
  |   |   |   |   `--main.yml
  |   |   |   |-- templates
  |   |   |   |   `--ads_iptables
#+END_EXAMPLE
** Tasks  
*** Building the Firewall rules
**** Firewall rules
     Description of firewall rules which are common across
     all the nodes in the cluster including ads server are
     described in [[./common.org][common role]].

#+BEGIN_SRC yml :tangle roles/ads_server/templates/ads_iptables :eval no
# Firewall configuration written by system-config-firewall
# Manual customization of this file is not recommended.
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT

#Allow incoming ads from router
-A INPUT -s {{ router_internal_ip }}/32 -p tcp -m state --state NEW -m tcp --dport 8080 -j ACCEPT

# Allow incoming http packets from local subnet
-A INPUT -m state --state NEW -p tcp -m tcp --dport 80 -j ACCEPT  
-A INPUT -s {{local_subnet}} -p tcp -m tcp --dport 80 -j ACCEPT

#Allow incoming https packets from local subnet
-A INPUT -m state --state NEW -p tcp -m tcp --dport 443 -j ACCEPT
-A INPUT -s {{local_subnet}} -p tcp -m tcp --dport 443 -j ACCEPT

###### END specific nagios #######
#Allow incoming NRPE queries for nagios from nagios servers
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5666 -j ACCEPT
#Log all other "blocked_input_" attempts with rate limiting
-A INPUT -m state --state NEW -m limit --limit 2/min -j LOG --log-prefix "blocked_input_"

#Reply with proper ICMP error message and reject the connection
-A INPUT -j REJECT --reject-with icmp-host-prohibited
#Do not allow any packet to be forwarded
-A FORWARD -j REJECT 
##Output rules

#Allow outgoing connections to localhost
-A OUTPUT -s 127.0.0.0/8 -o lo -j ACCEPT

#Allow ongoing connections
-A OUTPUT -m state --state RELATED,ESTABLISHED -j ACCEPT

#Allow DNS queries
-A OUTPUT -p udp -m udp --dport 53 -j ACCEPT

#Allow outgoing connections on tcp port 8000 to router, this is for bandwidthd on router
-A OUTPUT -p tcp -m tcp -d {{router_internal_ip}} --dport 8000 -j ACCEPT
-A OUTPUT -j ACCEPT
COMMIT
#+END_SRC
**** Configuring firewall rules 
     The following task Copies =iptables= template created
     at [[Firewall%20rules][ Firewall rules]] to ads and notifies to restart the
     iptables service if there are any modifications in the
     configuration.

#+BEGIN_SRC yaml :tangle roles/ads_server/tasks/main.yml
---
- name: Configure iptables firewall
  template: src=ads_iptables dest=/etc/sysconfig/iptables owner=root group=root mode=600
  notify:
   - restart iptables
#+END_SRC
*** Install ADS dependencies
    #+BEGIN_SRC yml :tangle roles/ads_server/tasks/install-ads-dependencies.yml
- name: installing epel-release and sshpass
  yum: name="{{item}}" state=installed
  environment: "{{proxy_env}}"
  with_items:
   - epel-release
   - sshpass

- name: installing git
  yum: name=git state=installed
  environment: "{{proxy_env}}"
  register: out
- debug: var=out.stdout_lines

- name: Cloning setup-ovpl-centos repo
  git:
   repo: http://github.com/vlead/setup-ovpl-centos.git
   dest: ~/setup-ovpl-centos
  ignore_errors: true
  environment: "{{proxy_env}}"

- name: Setting proxy in config.sh to install MongoDB
  replace: 
       path: ~/setup-ovpl-centos/scripts/config.sh
       regexp: 'export http_proxy=""'
       replace: 'export http_proxy="{{proxy_env.http_proxy}}"'

- name: Settiing proxy in config.sh to install openvz
  replace: 
       path: ~/setup-ovpl-centos/scripts/config.sh
       regexp: 'export https_proxy=""'
       replace: 'export https_proxy="{{proxy_env.https_proxy}}"'

- name: Comment install_openvz.sh
  command: 'sed -i "/install_openvz/s/^/#/g" ~/setup-ovpl-centos/scripts/centos_prepare_ovpl.sh'
  register: out
- debug: var=out.stdout_lines


- name: Running centos-prepare-ovpl shell script to install mongodb and other required packages for ADS
  command: ./centos_prepare_ovpl.sh
  environment: "{{proxy_env}}"
  args:
   chdir: setup-ovpl-centos/scripts/
  register: out  
- debug: var=out.stdout_lines

- name: Install certifi dependecy for tornado-4.3
  get_url: url=https://pypi.python.org/packages/20/d0/3f7a84b0c5b89e94abbd073a5f00c7176089f526edb056686751d5064cbd/certifi-2017.7.27.1.tar.gz#md5=48e8370da8b370a16e223ee9c7b6b063 dest=~/certifi.tar.gz
  environment: "{{proxy_env}}"

- name: Un-taring certifi
  unarchive:  src=~/certifi.tar.gz  dest=~/ remote_src=yes

- name: Install certifi
  command: python setup.py install
  environment: "{{proxy_env}}"
  args:
   chdir: ~/certifi-2017.7.27.1/

- name: Installing python2-backports_abc,python-singledispatch,python-backports-ssl_match_hostname(tornado dependencies)
  yum: name="{{item}}" state=installed
  with_items:
    - python2-backports_abc 
    - python-singledispatch 
    - python-backports-ssl_match_hostname
  environment: "{{proxy_env}}"

- name: Installing epel-release dependencies
  yum: name=epel-release state=installed
  environment: "{{proxy_env}}"

- name: Installing mod_wsgi dependencies
  yum: name=mod_wsgi state=installed
  environment: "{{proxy_env}}"

- name: Installing python-pip dependencies
  yum: name=python-pip state=installed
  environment: "{{proxy_env}}"

- name: Installing flask
  pip: name=flask
  environment: "{{proxy_env}}"

- name: Installing oauthlib
  pip: name=oauthlib
  environment: "{{proxy_env}}"

- name: Installing flask-oauthlib
  pip: name=flask-oauthlib
  environment: "{{proxy_env}}"

- name: Installing sh
  pip: name=sh
  environment: "{{proxy_env}}"

- name: Installing netaddr
  pip: name=netaddr
  environment: "{{proxy_env}}"

- name: Installing pymongo
  pip: name=pymongo
  environment: "{{proxy_env}}"

- name: Downloading python tornado-4.3 file 
  get_url: url=https://pypi.python.org/packages/source/t/tornado/tornado-4.3.tar.gz dest=~/
  environment: "{{proxy_env}}"

- name: Extracting torando-4.3tar.gz file
  unarchive:  src=~/tornado-4.3.tar.gz  dest=~/ remote_src=yes


- name: Running setu.py file from tornado-4.3 directory.
  command: python setup.py install
  environment: "{{proxy_env}}"
  register: out
  args:
   chdir: ~/tornado-4.3
- debug: var=out.stdout_lines

#+END_SRC

*** Configure ADS 
#+BEGIN_SRC yml :tangle roles/ads_server/tasks/configure-ads-server.yml
- name: Copy sample_config.json to config.json
  command: cp sample_config.json config.json
  args:
   chdir: ~/ovpl/config/

- name: Set HTTP_PROXY proxy in config.json file
  replace: 
   path: ovpl/config/config.json
   regexp: '"HTTP_PROXY":.*'
   replace: '"HTTP_PROXY": "{{proxy_env.http_proxy}}",'

- name: Set HTTPS_PROXY proxy in config.json file
  replace: 
   path: ovpl/config/config.json
   regexp: '"HTTPS_PROXY":.*'
   replace: '"HTTPS_PROXY": "{{proxy_env.https_proxy}}"'
  
- name: COOKIE UPDATE
  replace: 
    path: ovpl/config/config.json
    regexp: '"COOKIE_SECRET.*"'
    replace: '"COOKIE_SECRET": "jgsjdhgfcjgsdjgfvjhsdfhkjsdgk"'
- name: Set SERVER_IP in ADS config.json file
  replace: 
    path: ovpl/config/config.json
    regexp: '"SERVER_IP":.*"'
    replace: '"SERVER_IP": "10.100.1.9"'

- name: Set POOLID and ADAPTER_TO_USE
  replace: 
   path: ovpl/config/config.json
   regexp: '"ADAPTER_TO_USE" : {"POOLID" : 1, "ADAPTERID" : 2}'
   replace: '"ADAPTER_TO_USE" : {"POOLID" : 1, "ADAPTERID" : 3}'

- name: Copy sample_base_config.py base_config.py
  command: cp sample_base_config.py base_config.py
  args: 
    chdir: ovpl/config/adapters/
- name: set BASE_IP_ADDRESS
  lineinfile: 
    path: ovpl/config/adapters/base_config.py
    regexp: "^BASE_IP_ADDRESS =.*"
    line: 'BASE_IP_ADDRESS = "root@{{hostmachine_ip}}"'
    state: present
- name: ADS_ON_CONTAINER to true
  lineinfile: 
     path: ovpl/config/adapters/base_config.py
     regexp: "^ADS_ON_CONTAINER =.*"
     line: "ADS_ON_CONTAINER = True"
     state: present

- name: Set ADS_SERVER_VM_ID to CTID of container running ADS
  lineinfile: 
   path: ovpl/config/adapters/base_config.py
   regexp: "^ADS_SERVER_VM_ID*"
   line: 'ADS_SERVER_VM_ID = "1009"'
   state: present
- name: Set SUBNET
  lineinfile: 
    path: ovpl/config/adapters/base_config.py
    regexp: "SUBNET = .*" 
    line: 'SUBNET = ["10.100.0.0/16"]'
    state: present
- name: Set host name
  lineinfile: 
   path: ovpl/config/adapters/base_config.py
   regexp: "HOST_NAME = .*"
   line: 'HOST_NAME = "{{prefix}}vlabs.ac.in"'
   state: present
- name: Set SERVICE_HOST 
  lineinfile: 
   path: ovpl/config/adapters/base_config.py
   regexp: "^SERVICE_HOST = .*"
   line: 'SERVICE_HOST = "vlead@ansible.{{prefix}}vlabs.ac.in"'
   state: present

- name: Settings for centos_bridged_adapter
  command: cp sample_centos_bridged_config.py centos_bridged_config.py 
  args: 
   chdir: ~/ovpl/config/adapters/

- name: Set SUBNET_BRIDGE in ADS configuration file
  lineinfile:
   path: ovpl/config/adapters/centos_bridged_config.py
   regexp: "SUBNET_BRIDGE = .*"  
   line: 'SUBNET_BRIDGE = "br1"'
   state: present
        
- name: Google keys
  replace:
     path: ovpl/src/ads-web-app/config.py
     regexp: "CONSUMER_KEY.*"
     replace: 'CONSUMER_KEY = "{{consumer_key}}"'
- name: Comment out not needed line in ADS server
  command: sed -i '3{s/^/#/}' ~/ovpl/src/ads-web-app/config.py

- name: Adding Google Consumer secrete key
  replace:
     path: ovpl/src/ads-web-app/config.py
     regexp: "CONSUMER_SECRET.*"
     replace: 'CONSUMER_SECRET = "{{consumer_secret}}"'

- name: Replace ADS_SECRET_KEY
  lineinfile:
     path: ovpl/src/ads-web-app/config.py
     regexp: "^ADS_SECRET_KEY.*"
     line: 'ADS_SECRET_KEY = "placethekeyhere"'
     state: present

- name: Replace APP_URL
  lineinfile:
     path: ovpl/src/ads-web-app/config.py
     regexp: "^APP_URL .*"
     line: 'APP_URL = "http://ads.{{prefix}}virtual-labs.ac.in:8080"'
     state: present
#+END_SRC
*** Include above files in main.yml
  :PROPERTIES:
  :CUSTOM_ID: ads_server
  :END:      
#+BEGIN_SRC yml :tangle roles/ads_server/tasks/main.yml
- include: install-ads-dependencies.yml
- include: configure-ads-server.yml 
- name: Generating sshkeys
  command: "ssh-keygen -t rsa -f ~/.ssh/id_rsa| echo no"
  register: out
- debug: var=out.stdout_lines

- name: Getting public key from ADS server from root account
  command: "cat ~/.ssh/id_rsa.pub"
  register: ssh_keys

- name: Setting StrictHostKeyChecking to  no
  shell: "{{item}}"
  with_items:
    - 'sed -i "/^StrictHostKeyChecking.*/d" /etc/ssh/ssh_config'
    - 'echo "StrictHostKeyChecking=no" >> /etc/ssh/ssh_config'

- name: Copying public key of ADS server to Host machine
  command: 'sshpass -p "{{hostmachine_password}}" ssh-copy-id root@"{{hostmachine_ip}}"'
  register: out
- debug: var=out.stdout_lines

- name: Enabling ADS hooks between ADS and config servers. Appends the ads public key in the vlead user of config-server
  lineinfile:
    path: ~/.ssh/authorized_keys
    regexp: '^command="hook"*'
    line: "{{item}}"
    state: present
    create: yes
  with_items:
   - 'command="hooks.sh",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty {{ ssh_keys.stdout }}'


#+END_SRC
*** Configure ADS server with ads_server
    #+BEGIN_SRC yml :tangle ads_server.yml
---
- name: This file configures ADS server
  hosts: ads_server 
  remote_user: root
  
  vars:
   host_name: "ads.{{prefix}}vlabs.ac.in"
  roles:
    - common
    - os_harden
    - ads_server
    #+END_SRC

*** Handlers
**** Restart the services
    Restart the service iptables if there are any changes in
    the configuration. These handlers are called when
    associated tasks in =tasks/main.yaml= notifies to
    restart the services.

#+BEGIN_SRC yaml :tangle roles/ads_server/handlers/main.yaml 
---
- name: restart iptables
  service: name=iptables state=restarted
#+END_SRC
*** Install clients in ADS server 
    Install ossec_client,rsyslog_client,nagios_client in
    reverse-proxy-server.
    
#+BEGIN_SRC yaml :tangle install_clients_in_ads.yaml
---
- name: This file configures reverseproxy server
  hosts: ads_server 
  remote_user: root
  roles:
    - common_vars
#    - ossec_client
    - rsyslog_client
    - nagios_client
    - rsnapshot_client

#+END_SRC

** Variables Definition
    Variables are used by the ansible scripts to configure
    ADS. Values of these variables are fetched from the "common_vars"
    role.
#+BEGIN_SRC yaml :tangle roles/ads_server/meta/main.yml
---
dependencies:
- role: common_vars
#+END_SRC
